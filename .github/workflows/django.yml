name: Django CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [ 3.9 ]
    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports: [ '5432:5432' ]
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        working-directory: ./backend
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        working-directory: ./backend
        run: poetry install --no-interaction
      #----------------------------------------------
      #    run test suite and output coverage file
      #----------------------------------------------
      - name: Run Tests
        working-directory: ./backend
        run: poetry run pytest --tb=no --cov --cov-report=xml --cov-report=term
      #----------------------------------------------
      #             upload coverage stats
      #----------------------------------------------
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          file: ./coverage.xml
          flags: unittests
          name: test-cov

  linting:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      #----------------------------------------------
      #        load pip cache if cache exists
      #----------------------------------------------
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
          restore-keys: ${{ runner.os }}-pip
      #----------------------------------------------
      #          install and run linters
      #----------------------------------------------
      - name: Install linters
        run: python -m pip install black flake8 isort
      - name: Run Isort
        run: isort
#      - name: Run Black
#        run: black --check -v
      - name: Run Flake8
        run: flake8
      - name: Run mypy
        run: mypy

#  sorting-check:
#    runs-on: ubuntu-latest
#    strategy:
#      max-parallel: 4
#      matrix:
#        python-version: [ 3.9 ]
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-python@v2
#        with:
#          python-version: ${{ matrix.python-version }}
#
#      - name: Install Poetry
#        uses: snok/install-poetry@v1
#        with:
#          virtualenvs-create: true
#          virtualenvs-in-project: true
#
#      - name: Load cached venv
#        id: cached-poetry-dependencies
#        uses: actions/cache@v2
#        with:
#          path: .venv
#          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
#
#      - name: Install dependencies
#        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
#        working-directory: ./backend
#        run: poetry install --no-interaction --no-root
#      #----------------------------------------------
#      # install your root project, if required
#      #----------------------------------------------
#      - name: Install library
#        working-directory: ./backend
#        run: poetry install --no-interaction
#
#      - name: Correct Import
#        run: |
#          isort .
#
#  formatter-check:
#    runs-on: ubuntu-latest
#    strategy:
#      max-parallel: 4
#      matrix:
#        python-version: [ 3.9 ]
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-python@v2
#        with:
#          python-version: ${{ matrix.python-version }}
#
#      - name: Install Poetry
#        uses: snok/install-poetry@v1
#        with:
#          virtualenvs-create: true
#          virtualenvs-in-project: true
#
#      - name: Load cached venv
#        id: cached-poetry-dependencies
#        uses: actions/cache@v2
#        with:
#          path: .venv
#          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
#
#      - name: Install dependencies
#        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
#        working-directory: ./backend
#        run: poetry install --no-interaction --no-root
#      #----------------------------------------------
#      # install your root project, if required
#      #----------------------------------------------
#      - name: Install library
#        working-directory: ./backend
#        run: poetry install --no-interaction
#
#      - name: Checking typing
#        run: |
#          black . --check
#
#  linting-check:
#    runs-on: ubuntu-latest
#    strategy:
#      max-parallel: 4
#      matrix:
#        python-version: [ 3.9 ]
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-python@v2
#        with:
#          python-version: ${{ matrix.python-version }}
#
#      - name: Install Poetry
#        uses: snok/install-poetry@v1
#        with:
#          virtualenvs-create: true
#          virtualenvs-in-project: true
#
#      - name: Load cached venv
#        id: cached-poetry-dependencies
#        uses: actions/cache@v2
#        with:
#          path: .venv
#          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
#
#      - name: Install dependencies
#        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
#        working-directory: ./backend
#        run: poetry install --no-interaction --no-root
#      #----------------------------------------------
#      # install your root project, if required
#      #----------------------------------------------
#      - name: Install library
#        working-directory: ./backend
#        run: poetry install --no-interaction
#
#      - name: Correct Import
#        run: |
#          flake8 .
#
#  typing-check:
#    runs-on: ubuntu-latest
#    strategy:
#      max-parallel: 4
#      matrix:
#        python-version: [ 3.9 ]
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-python@v2
#        with:
#          python-version: ${{ matrix.python-version }}
#
#      - name: Install Poetry
#        uses: snok/install-poetry@v1
#        with:
#          virtualenvs-create: true
#          virtualenvs-in-project: true
#
#      - name: Load cached venv
#        id: cached-poetry-dependencies
#        uses: actions/cache@v2
#        with:
#          path: .venv
#          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
#
#      - name: Install dependencies
#        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
#        working-directory: ./backend
#        run: poetry install --no-interaction --no-root
#      #----------------------------------------------
#      # install your root project, if required
#      #----------------------------------------------
#      - name: Install library
#        working-directory: ./backend
#        run: poetry install --no-interaction
#
#      - name: Checking typing
#        run: |
#          mypy .
